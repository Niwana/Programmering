import System.IO  
import System.Directory  
import Data.List
import Data.Char
import Data.List.Split

-- OBS! Senaste versionen.
 
 {- Upplägg:
 Inledningen: man skapar en profil som läggs till i databasen.
 Meny: Gå igenom de fem alternativen.
 Välja vem man vill chatta med.
 Starta chatt.
 (Kunna avsluta chatt)
 
 Fixa:
 Add person: ibland läggs en tom rad till i listan, vilket gör att search funktionen sen 
 inte fungerar ordentligt om man inte går bort och tar bort den först i deletePerson.
 Delete person: Fixa så programmet inte kraschar om man skriver en siffra som är större än längden på listan.
 ((Ev ta bort: Perfect match: ange kriterier --> filtrera listan.))
perfectMatch måste skriva ut namnet på personen.
 -}
 
 -- Deklarer data         
data Person = Person { 
    personName :: String,
    personAge :: Int,
    personLength :: Int,
    personLocation :: String,
    personGenre :: String
    }
        deriving Show
 
 
 -- Körs när programmed startar        
main = do
    putStrLn "\nWelcome to DERP, the most advanced dating program ever made!"
    putStrLn "Please provide us with some information about yourself \n"
     
    intro
     
     
 -- Kör funktionen för att samla information om användaren        
intro = do    
    putStrLn "To start with, what is your name?"
    name <- getLine
     
    putStrLn "\nYour age?"
    age <- getLine
 
    putStrLn "\nYour length?"
    length <- getLine
     
    putStrLn "\nWhere do you live?"
    city <- getLine
     
    putStrLn "\nAnd last, your favorite genre?"
    genre <- getLine
     
    if (name  == "" ||  age == "" ||  length == "" || city == "" || genre == "")
        then do putStrLn "Hold on! I think you missed something! Please try again... \n"
                intro
        else do 
            putStrLn $ "\nExcellent " ++ name ++ ". Welcome to DERP! \n"
            appendFile "databas.txt" ("\n" ++ name ++ "," ++ age ++ "," ++ 
                                      length ++ "," ++ city ++ "," ++ genre)
            menu    


-- Ser efter om en lista innehåller bara Ints. Retunerar isåfall True            
checkDigits :: [Char] -> Bool            
checkDigits [] = False
checkDigits [x] = isDigit x
checkDigits (x:xs) = isDigit x && checkDigits xs

-- Menyn med diverse alternativ.    
menu = do
    putStrLn "\nChoose one of the following options: \n"
    putStrLn "1) Display the database"
    putStrLn "2) Search in the database"
    putStrLn "3) Add a person"
    putStrLn "4) Delete a person"
    putStrLn "5) Find your perfect match"
    putStrLn "6) Start chatting"
   
    opt <- getLine
    let option = if (checkDigits opt == True)
                        then read opt
                        else 0                   

    if (option > 0 && option <= 6)
            then
                if (option == 1)
                then displayDatabase
                    else if (option == 2)
                    then searchDatabase
                        else if (option == 3)
                        then addPerson
                            else if (option == 4)
                            then deletePerson
                                else if (option == 5)
                                then perfectMatch
                                    else if (option == 6)
                                    then startChatt
                                        else return ()
                else do putStrLn "\n Sorry, that's not an option. Try again with a number 1-6!"  
                        menu

     

 -- Visa hela databasen.        
displayDatabase = do
    putStrLn "\nHere is the database: \n"
    datab <- readFile $ "databas.txt" 
    putStrLn $ datab
    menu
 
   
 -- Sök efter personer utefter namn, ålder, längd, stad och filmgenre

 
searchDatabase = do
    putStrLn "\nChoose a category to search for:"
    putStrLn "1) Name"
    putStrLn "2) Age"
    putStrLn "3) Length"
    putStrLn "4) City"
    putStrLn "5) Favorite film genre"
    putStrLn "6) Go back to main menu"
     
    opt <- getLine
    let option = if (checkDigits opt == True)
                        then read opt
                        else 0
    
    if (option > 0 && option <= 6)
            then
                if (option == 1)
                then searchName
                    else if (option == 2)
                    then searchAge
                        else if (option == 3)
                        then searchLength
                            else if (option == 4)
                            then searchCity
                                else if (option == 5)
                                then searchGenre
                                    else if (option == 6)
                                    then menu
                                    else return ()
            else do putStrLn "\nSorry, that's not an option. Try again with a number 1-6"  
                    searchDatabase
          
 
                    
personToString :: Person -> String
personToString (Person name age length city genre) = name ++ "," ++ show age ++ "," ++ 
                                                      show length ++ "," ++ city ++ "," ++ genre 
                                                      
parse :: String -> [Person]
parse txt = let rows = map (splitOn ",") (lines txt)
             in map (\[name, age, length, city, genre] -> Person name (read age) (read length) city genre) rows
 
 -- Sök efter alla med ett visst namn                                                     
searchName = do
    putStrLn "\n Type the name of the person you're looking for: \n"
    namn <- getLine
    input <- readFile $ "databas.txt"
    putStrLn "\n Here are all the people that matches your search: \n"
    let people = parse input
        output = map personToString (filter (\p -> personName p == namn) people)

    if null output
        then do putStrLn "Just kidding, no matches. Try another name!"
                searchName
        else do putStrLn (unlines output)
                putStrLn "Let's get back to the search menu again!"
                searchDatabase
        
-- Sök efter alla med en viss ålder     
searchAge = do
    putStrLn "\n You can search by an age interval. Type the minimum age: \n"
    minAge <- getLine
    putStrLn "\n And the maximum age: \n"
    maxAge <- getLine
    
    let ageList = if (checkDigits minAge == True && checkDigits maxAge == True)
                    then [(read minAge::Int)..(read maxAge::Int)]
                    else []
    
    input <- readFile $ "databas.txt"
    putStrLn "\n Here are all the people that matches your search: \n"
    let people = parse input
        output = map personToString (filter (\p -> (elem (personAge p) ageList)) people)
 
    if null output      -- kollar om listan är tom 
        then do putStrLn "Just kidding, no matches. Try another interval!"
                searchAge
        else do putStrLn (unlines output)
                putStrLn "Let's get back to the search menu again!"
                searchDatabase

                
-- Sök efter alla med en viss längd         
searchLength = do
    putStrLn "\n You can search by a length interval. Type the minimum length: \n"   
    minLength <- getLine
    putStrLn "\n And the maximum length: \n"
    maxLength <- getLine
    
    let lengthList = if (checkDigits minLength == True && checkDigits maxLength == True)
                    then [(read minLength::Int)..(read maxLength::Int)]
                    else []
    
    input <- readFile $ "databas.txt"
    putStrLn "\nHere are all the people that matches your search: \n"
    let people = parse input
        output = map personToString (filter (\p -> (elem (personLength p) lengthList)) people)
 
-- kollar om listan är tom 
    if null output
        then do putStrLn "Just kidding, no matches. Try another interval!"
                searchLength
        else do putStrLn (unlines output)
                putStrLn "Let's get back to the search menu again!"
                searchDatabase
 

-- Sök efter alla som bor i en viss stad         
searchCity = do
    putStrLn "\nType the name of the city you're looking for: \n"
    city <- getLine
    input <- readFile $ "databas.txt"
    putStrLn "\nHere are all the people that matches your search: \n"
    let people = parse input
        output = map personToString (filter (\p -> personLocation p == city) people)
         
    if null output
        then do putStrLn "Just kidding, no matches. Try another city!"
                searchName
        else do putStrLn (unlines output)
                putStrLn "Let's get back to the search menu again!"
                searchDatabase         
 
     
-- Sök efter alla som har en viss favoritgenre    
searchGenre = do
    putStrLn "\nType the name of the genre you're looking for: \n"
    genre <- getLine
    input <- readFile $ "databas.txt"
    putStrLn "\nHere are all the people that matches your search: \n"
    let people = parse input
        output = map personToString (filter (\p -> personGenre p == genre) people)

    if null output
        then do putStrLn "Just kidding, no matches. Try another genre!"
                searchName
        else do putStrLn (unlines output)
                putStrLn "Let's get back to the search menu again!"
                searchDatabase
 
     
 -- Lägger till en person till databasen.
addPerson = do    
    putStrLn "\nPlease enter the name of the person:"
    name <- getLine
     
    putStrLn "\nThe age:"
    age <- getLine
 
    putStrLn "\nThe length:"
    length <- getLine
     
    putStrLn "\nCity:"
    city <- getLine
     
    putStrLn "\nAnd last, favorite film genre:"
    genre <- getLine
     
    if (name  == "" ||  age == "" ||  length == "" || city == "" || genre == "")
        then do putStrLn "Hold on! I think you missed something! Please try again... \n"
                addPerson
        else do 
            appendFile "databas.txt" ("\n" ++ name ++ "," ++ age ++ "," ++ 
                                      length ++ "," ++ city ++ "," ++ genre)
            menu 
             
             
 -- Funktionen tar bort en person ur databasen
deletePerson = do
    handle <- openFile "databas.txt" ReadMode           -- Öppna originalfilen och skapa en temporär fil. "." = filens sökväg, "temp" = namnet på den temporära filen.
    (tempName, tempHandle) <- openTempFile "." "temp"  
    
    contents <- hGetContents handle             -- Hämtar all text från handle (som är inputfilen) och tilldelar innehållet till contents.
    let person = lines contents                 -- Contents görs om till en lista med strings via "lines" som sedan sätts samman med respektive siffra via zipWidth
        numberedTasks = zipWith (\n line -> show n ++ ") " ++ line) [0..] person     
    
    putStrLn "Here is the database: "  
    putStrLn $ unlines numberedTasks  
     
    putStrLn "Please type the number of the person you want to delete:"     
    option <- getLine    
    
    let newPerson = if ((checkDigits option == True) && (elem (option ++ ")") ( words ( unlines numberedTasks)) == True))
                        then delete (person !! read option) person  -- Om getLine är en siffra och är en siffra i numberedTasks så ska personen tas bort.
                        else person                                 --Returnerar listan annars.    
    hPutStr tempHandle $ unlines newPerson  
     
    hClose handle       -- Sedan stängs båda filerna och den gamla filen tas bort samtidigt som den temporära filen byter namn.
    hClose tempHandle  
    removeFile "databas.txt"  
    renameFile tempName "databas.txt"
 
    if newPerson == person  --Om ingen kontakt tas bort kör om funktionen, annars återgå till meny.
        then do putStrLn "\n Please try again with a number from the list! \n"
                deletePerson
        else do putStrLn "\n Done! Let's get back to the main menu again!"
                menu

                
-- Filtrerar bort alla personer som inte uppfyler åldersintervallet + staden
perfectMatch = do
    putStrLn "\n Choose the age interval for wich you're intrested in."
    putStrLn "Type the minimum age:"
    minAge <- getLine
    putStrLn "\n And the maximum age:"
    maxAge <- getLine
    
    let ageList = if (checkDigits minAge == True && checkDigits maxAge == True)
                    then [(read minAge::Int)..(read maxAge::Int)]
                    else []
                    
    putStrLn "\n Now choose the desired city."
    city <- getLine
    
    input <- readFile $ "databas.txt"
    let people = parse input
        output = map personToString (filter (\p -> personLocation p == city) (filter (\p -> (elem (personAge p) ageList)) people))
        
               {- if (city == "" && minAge == "" && maxAge == "")
                    then map personToString people
                    else if (city == "") -- Om någon parameter lämnas tom så ska de inte filtreras bort.
                        then map personToString (filter (\p -> (elem (personAge p) ageList)) people)
                        else if (minAge == "")
                            then map personToString (filter (\p -> personAge p <= read maxAge) people)
                            else if (maxAge == "")
                                then map personToString (filter (\p -> personAge p >= read minAge) people)
                                else map personToString (filter (\p -> personLocation p == city) (filter (\p -> (elem (personAge p) ageList)) people))
                -}
    -- Kanske man borde göra en ny fil så man kan använda en annan do-funktion för att
    -- Skriva ut den lista varvid man har olika alternativ.
    let numberedPersons = zipWith (\n line -> show n ++ ") " ++ line) [0..] output
    
    if null output
        then do putStrLn "\n Just kidding, again! Don't leave a field empty or you will never find your true love!"
                perfectMatch
        else do putStrLn "\n Here is your perfect matches:"
                putStrLn (unlines numberedPersons)
                
                putStrLn "Which person do you want to start talking to? \n"
                option <- getLine
                

                -- 9) Robin,25,192,Gothenburg,Action
                if ((checkDigits option == True) && (elem (option ++ ")") ( words ( unlines numberedPersons)) == True))
                    then putStrLn ((words ((splitOn "," (numberedPersons !! read option)) !! 0) !! 1) :: String)
                    else do putStrLn "\n Please try again with a number from the list!"
                            perfectMatch

                
-- Välja person att börja chatta med
startChatt = do    
    
    name <- getLine
    putStrLn $ "\n Ok, starting chat with " ++ name ++ ", have fun! \n"
