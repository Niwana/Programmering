import System.IO  
import System.Directory  
import Data.List
import Data.Char
import Data.List.Split
import Prelude hiding (catch)
import System.IO
import System.IO.Error hiding (catch) 
import System.Directory  
import Test.QuickCheck
import Data.List
import Data.Char
import Data.List.Split (splitOn)  
import qualified Data.Text as T
import Control.Exception
import Control.Monad

-- Version 2016-03-01 19:00 - Anton
 
{- Upplägg:
Inledningen: man skapar en profil som läggs till i databasen.
Meny: Gå igenom de fem alternativen.
Välja vem man vill chatta med.
Starta chatt.
Kunna avsluta chatt och gå tillbaka till startmenyn.
 
Fixa:
Göra klart chattdelen

-}
 
 -- Deklarera data         
data Person = Person { 
    personName :: String,
    personAge :: Int,
    personLength :: Int,
    personLocation :: String,
    personGenre :: String
    }
        deriving Show
 
 
 -- Körs när programmed startar        
main = do
    putStrLn "\nWelcome to DERP, the most advanced dating program ever made!"
    putStrLn "Please provide us with some information about yourself \n"
     
    intro
     
     
 -- Kör funktionen för att samla information om användaren        
intro = do    
    putStrLn "To start with, what is your name?"
    name <- getLine
     
    putStrLn "\nYour age?"
    age <- getLine
 
    putStrLn "\nYour length?"
    length <- getLine
     
    putStrLn "\nWhere do you live?"
    city <- getLine
     
    putStrLn "\nAnd last, your favorite genre?"
    genre <- getLine
     
    if (name  == "" ||  age == "" ||  length == "" || city == "" || genre == "")
        then do putStrLn "Hold on! I think you missed something! Please try again... \n"
                intro
        else do 
            putStrLn $ "\nExcellent " ++ name ++ ". Welcome to DERP! \n"
            appendFile "databas.txt" ("\n" ++ name ++ "," ++ age ++ "," ++ 
                                      length ++ "," ++ city ++ "," ++ genre)
            menu    


-- Ser efter om en lista innehåller bara Ints. Retunerar isäfall True            
checkDigits :: [Char] -> Bool            
checkDigits [] = False
checkDigits [x] = isDigit x
checkDigits (x:xs) = isDigit x && checkDigits xs

-- Menyn med diverse alternativ.    
menu = do
    putStrLn "\nChoose one of the following options: \n"
    putStrLn "1) Display the database"
    putStrLn "2) Search in the database"
    putStrLn "3) Add a person"
    putStrLn "4) Delete a person"
    putStrLn "5) Find your perfect match"
    putStrLn "6) Start chatting"
   
    opt <- getLine
    let option = if (checkDigits opt == True)
                        then read opt
                        else 0                   

    if (option > 0 && option <= 6)
            then
                if (option == 1)
                then displayDatabase
                    else if (option == 2)
                    then searchDatabase
                        else if (option == 3)
                        then addPerson
                            else if (option == 4)
                            then deletePerson
                                else if (option == 5)
                                then perfectMatch
                                    else if (option == 6)
                                    then startChat
                                        else return ()
                else do putStrLn "\nSorry, that's not an option. Try again with a number 1-6!"  
                        menu

     

-- Visa hela databasen.        
displayDatabase = do
    putStrLn "\nHere is the database: \n"
    datab <- readFile $ "databas.txt" 
    putStrLn $ datab
    menu
 
   
-- Sök efter personer utefter namn, ålder, längd, stad och filmgenre
searchDatabase = do
    putStrLn "\nChoose a category to search for:"
    putStrLn "1) Name"
    putStrLn "2) Age"
    putStrLn "3) Length"
    putStrLn "4) City"
    putStrLn "5) Favorite film genre"
    putStrLn "6) Go back to main menu"
     
    opt <- getLine
    let option = if (checkDigits opt == True)
                        then read opt
                        else 0
    
    if (option > 0 && option <= 6)
            then
                if (option == 1)
                then searchName
                    else if (option == 2)
                    then searchAge
                        else if (option == 3)
                        then searchLength
                            else if (option == 4)
                            then searchCity
                                else if (option == 5)
                                then searchGenre
                                    else if (option == 6)
                                    then menu
                                    else return ()
            else do putStrLn "\nSorry, that's not an option. Try again with a number 1-6"  
                    searchDatabase
          
 
                    
personToString :: Person -> String
personToString (Person name age length city genre) = name ++ "," ++ show age ++ "," ++ 
                                                      show length ++ "," ++ city ++ "," ++ genre 
                                                      
parse :: String -> [Person]
parse txt = let rows = map (splitOn ",") (lines txt)
             in map (\[name, age, length, city, genre] -> Person name (read age) (read length) city genre) rows

bigLetter [] = []
bigLetter (x:xs) = [toUpper x] ++ xs  
           
-- Sök efter alla med ett visst namn                                                     
searchName = do
    putStrLn "\nType the name of the person you're looking for: \n"
    namn <- getLine
    input <- readFile $ "databas.txt"
    putStrLn "\nHere are all the people that matches your search: \n"
    let people = parse input
        output = map personToString (filter (\p -> personName p == (bigLetter namn)) people)

    if null output
        then do putStrLn "Just kidding, no matches. Try another name!"
                searchName
        else do putStrLn (unlines output)
                putStrLn "Let's get back to the search menu again!"
                searchDatabase
 
 
-- Sök efter alla med en viss ålder     
searchAge = do
    putStrLn "\nYou can search by an age interval. Type the minimum age: \n"
    minAge <- getLine
    putStrLn "\nAnd the maximum age: \n"
    maxAge <- getLine
    
    let ageList = if (checkDigits minAge == True && checkDigits maxAge == True)
                    then [(read minAge::Int)..(read maxAge::Int)]
                    else []
    
    input <- readFile $ "databas.txt"
    putStrLn "\nHere are all the people that matches your search: \n"
    let people = parse input
        output = map personToString (filter (\p -> (elem (personAge p) ageList)) people)
 
    if null output      -- kollar om listan är tom 
        then do putStrLn "Just kidding, no matches. Try another interval!"
                searchAge
        else do putStrLn (unlines output)
                putStrLn "Let's get back to the search menu again!"
                searchDatabase

                
-- Sök efter alla med en viss längd         
searchLength = do
    putStrLn "\nYou can search by a length interval. Type the minimum length: \n"   
    minLength <- getLine
    putStrLn "\nAnd the maximum length: \n"
    maxLength <- getLine
    
    let lengthList = if (checkDigits minLength == True && checkDigits maxLength == True)
                    then [(read minLength::Int)..(read maxLength::Int)]
                    else []
    
    input <- readFile $ "databas.txt"
    putStrLn "\nHere are all the people that matches your search: \n"
    let people = parse input
        output = map personToString (filter (\p -> (elem (personLength p) lengthList)) people)
 
    if null output          -- kollar om listan är tom 
        then do putStrLn "Just kidding, no matches. Try another interval!"
                searchLength
        else do putStrLn (unlines output)
                putStrLn "Let's get back to the search menu again!"
                searchDatabase
 

-- Sök efter alla som bor i en viss stad         
searchCity = do
    putStrLn "\nType the name of the city you're looking for: \n"
    city <- getLine
    input <- readFile $ "databas.txt"
    putStrLn "\nHere are all the people that matches your search: \n"
    let people = parse input
        output = map personToString (filter (\p -> personLocation p == (bigLetter city)) people)
         
    if null output
        then do putStrLn "Just kidding, no matches. Try another city!"
                searchName
        else do putStrLn (unlines output)
                putStrLn "Let's get back to the search menu again!"
                searchDatabase         
 
 
-- Sök efter alla som har en viss favoritgenre    
searchGenre = do
    putStrLn "\nType the name of the genre you're looking for: \n"
    genre <- getLine

    input <- readFile $ "databas.txt"
    putStrLn "\nHere are all the people that matches your search: \n"
    let people = parse input
        output = map personToString (filter (\p -> personGenre p == (bigLetter genre)) people)

    if null output
        then do putStrLn "Just kidding, no matches. Try another genre!"
                searchName
        else do putStrLn (unlines output)
                putStrLn "Let's get back to the search menu again!"
                searchDatabase
 
     
 -- Lägger till en person till databasen.
addPerson = do    
    putStrLn "\nPlease enter the name of the person:"
    name <- getLine
     
    putStrLn "\nThe age:"
    age <- getLine
 
    putStrLn "\nThe length:"
    length <- getLine
     
    putStrLn "\nCity:"
    city <- getLine
     
    putStrLn "\nAnd last, favorite film genre:"
    genre <- getLine
     
    if (name  == "" ||  age == "" ||  length == "" || city == "" || genre == "")
        then do putStrLn "Hold on! I think you missed something! Please try again... \n"
                addPerson
        else do 
            appendFile "databas.txt" ("\n" ++ name ++ "," ++ age ++ "," ++ 
                                      length ++ "," ++ city ++ "," ++ genre)
            menu 
             
             
 -- Funktionen tar bort en person ur databasen
deletePerson = do
    handle <- openFile "databas.txt" ReadMode           -- öppna originalfilen och skapa en temporär fil. "." = filens sökvä "temp" = namnet på den temporära filen.
    (tempName, tempHandle) <- openTempFile "." "temp"  
    
    contents <- hGetContents handle             -- Hämtar all text från handle (som är inputfilen) och tilldelar innehållet till contents.
    let person = lines contents                 -- Contents görs om till en lista med strings via "lines" som sedan sätts samman med respektive siffra via zipWidth
        numberedTasks = zipWith (\n line -> show n ++ ") " ++ line) [0..] person     
    
    putStrLn "Here is the database: "  
    putStrLn $ unlines numberedTasks  
     
    putStrLn "Type the number of the person you want to delete:"     
    option <- getLine    
    
    let newPerson = if ((checkDigits option == True) && (elem (option ++ ")") ( words ( unlines numberedTasks)) == True))
                        then delete (person !! read option) person  -- Om getLine är en siffra och är en siffra i numberedTasks så ska personen tas bort.
                        else person                                 --Returnerar listan annars.    
    hPutStr tempHandle $ unlines newPerson  
     
    hClose handle       -- Sedan stängs båda filerna och den gamla filen tas bort samtidigt som den temporära filen byter namn.
    hClose tempHandle  
    removeFile "databas.txt"  
    renameFile tempName "databas.txt"
 
    if newPerson == person  --Om ingen kontakt tas bort kör om funktionen, annars återgå till meny.
        then do putStrLn "\nSorry, couldn't do that. Please try again with a number from the list! \n"
                deletePerson
        else do putStrLn "\nDone! Let's get back to the main menu again!"
                menu

                
-- Filtrerar bort alla personer som inte uppfyler åldersintervallet + staden
perfectMatch = do
    putStrLn "\nChoose the age interval for wich you're intrested in."
    putStrLn "First, type the minimum age:"
    minAge <- getLine
    putStrLn "\n And the maximum age:"
    maxAge <- getLine
    
    let ageList = if (checkDigits minAge == True && checkDigits maxAge == True)
                    then [(read minAge::Int)..(read maxAge::Int)]
                    else []
                    
    putStrLn "\nNow choose the desired city."
    city <- getLine
    
    putStrLn "\nAnd last the genre!"
    genre <- getLine
    
    input <- readFile $ "databas.txt"
    let people = parse input
        output = map personToString (filter (\p -> personGenre p == (bigLetter genre) || (bigLetter genre) == "") (filter (\p -> personLocation p == (bigLetter city) || (bigLetter city) == "") (filter (\p -> (elem (personAge p) ageList || ageList == [])) people)))

    let numberedPersons = zipWith (\n line -> show n ++ ") " ++ line) [0..] output    -- Skriva ut den lista varvid man har olika alternativ.
    
    if null output
        then do putStrLn "\nSorry, no matches!"
                putStrLn "\nDon't leave a field empty or you will never find your true love!"
                putStrLn "\nOr maybe you're just too picky!"
                perfectMatch
        else do putStrLn "\nHere, behold your perfect match(es):"
                putStrLn (unlines numberedPersons)
                
                putStrLn "Which person do you want to start talking to? \n"
                option <- getLine
                let chatfriend = (words (unwords (splitOn "," (numberedPersons !! read option))) !! 1)
                
                if ((checkDigits option == True) && (elem (option ++ ")") ( words ( unlines numberedPersons)) == True))
                    then do putStrLn ("Starting a chat with " ++ chatfriend ++ ". Good luck! ;)")
                            removeIfExists ("chatWith.temp") >> appendFile "chatWith.temp" (chatfriend)
                            do startChat                            
                    else do putStrLn "\nPlease try again with a number from the list!"
                            perfectMatch

                
-- Chattfunktionen
{- To do:
- Lägg till funktionen för att ta bort "överflödiga"/konstiga tecken.  
  
-}


isConsonant = "qwrtpsdfghjklzxcvbnmQWRTPSDFGHJKLZXCVNM" 
versal = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

isIn :: (Eq a) => [a] -> [a] -> Bool
n `isIn` h = any (n `isPrefixOf`) (tails h)
  
perify :: [Char] -> [Char]
perify xs
        | (head (xs)) == 'P' = ", " ++ xs
        | (head (xs)) `notElem` isConsonant = ", P" ++ [(toLower (head (xs)))] ++ (tail (xs))
        | otherwise = ", P" ++ (tail (xs))

positivt :: [Char] -> Bool
positivt xs
    | "ja " `isIn` zs = True
    | "yeah " `isIn` zs = True
    | "jo " `isIn` zs = True
    | "yes " `isIn` zs = True
    | "mja " `isIn` zs = True
    | "true " `isIn` zs = True
    | otherwise = False
     where zs = (filter (/=',') (filter (/='!') (map toLower xs)) ++ " ")
   
leaveChat :: [Char] -> Bool  
leaveChat xs
    | "hejdå " `isIn` zs = True
    | "bye " `isIn` zs = True
    | "leave " `isIn` zs = True
    | "turn off " `isIn` zs = True
    | "shut down " `isIn` zs = True
    | otherwise = False
     where zs = (filter (/=',') (filter (/='!') (map toLower xs)) ++ " ") 

--------------------------------------------------------------------------     
  
filmer :: [Char] -> Bool
filmer xs
    | "film " `isIn` zs = True
    | "films " `isIn` zs = True
    | "movie " `isIn` zs = True
    | "movies " `isIn` zs = True
    | "action " `isIn` zs = True
    | "romance " `isIn` zs = True
    | "comedy " `isIn` zs = True
    | "documentary " `isIn` zs = True
    | "thriller " `isIn` zs = True
    | "horror " `isIn` zs = True
    | otherwise = False
     where zs = (filter (/=',') (filter (/='!') (map toLower xs)) ++ " ")
        
live :: [Char] -> Bool  
live xs
    | "live " `isIn` zs = True
    | "city " `isIn` zs = True
    | "bo " `isIn` zs = True
    | "stad " `isIn` zs = True
    | "städa " `isIn` zs = True
    | otherwise = False
     where zs = (filter (/=',') (filter (/='!') (map toLower xs)) ++ " ")

poems :: [Char] -> Bool  
poems xs
    | "read " `isIn` zs = True
    | "write " `isIn` zs = True
    | "poetry " `isIn` zs = True
    | "poesi " `isIn` zs = True
    | "läsa " `isIn` zs = True
    | "skriva " `isIn` zs = True
    | otherwise = False
     where zs = (filter (/=',') (filter (/='!') (map toLower xs)) ++ " ")

hookUp :: [Char] -> Bool  
hookUp xs
    | "träffas " `isIn` zs = True
    | "bar " `isIn` zs = True
    | "middag " `isIn` zs = True
    | "date " `isIn` zs = True
    | "drink " `isIn` zs = True
    | otherwise = False
     where zs = (filter (/=',') (filter (/='!') (map toLower xs)) ++ " ")     
   
svettig :: [Char] -> Bool  
svettig xs
    | "träna " `isIn` zs = True
    | "svett " `isIn` zs = True
    | "lång dag " `isIn` zs = True
    | "long day " `isIn` zs = True
    | "shoes " `isIn` zs = True
    | otherwise = False
     where zs = (filter (/=',') (filter (/='!') (map toLower xs)) ++ " ")     
  
 
-- Lägg till alla nya topics här!     
identify x = if (leaveChat x)
                then do slut
                else if (filmer x)
                    then do favorit
                    else if (live x)
                        then do bor
                        else if (poems x)
                            then do poetry
                            else if (hookUp x)
                                then do date
                                else if (svettig x)
                                    then do svett
                                    else return ()
 
-- idList = ["träna ", "svett ", "lång dag ", "long day ", "shoes ", "read ", "write ", "poetry ", "poesi ", "läsa ", "skriva ", "träffas ", "bar ", "middag ", "date ", "drink ", "film ", "films ", "movie ", "movies ", "action ", "romance ", "comedy ", "documentary ", "thriller ", "horror ", "live ", "city ", "bo ", "stad ", "städa "] 
 
removeIfExists :: FilePath -> IO ()
removeIfExists fileName = removeFile fileName `catch` handleExists
  where handleExists e
          | isDoesNotExistError e = return ()
          | otherwise = throwIO e    

          



     
startChat = do
    handle <- openFile "databas.txt" ReadMode           -- öppna originalfilen och skapa en temporär fil. "." = filens sökvä "temp" = namnet på den temporära filen.
    (tempName, tempHandle) <- openTempFile "." "temp"  
    
    contents <- hGetContents handle             -- Hämtar all text från handle (som är inputfilen) och tilldelar innehållet till contents.
    let person = lines contents                 -- Contents görs om till en lista med strings via "lines" som sedan sätts samman med respektive siffra via zipWidth
        numberedPersons = zipWith (\n line -> show n ++ ") " ++ line) [0..] person     
    
    putStrLn "Here is the database: "  
    putStrLn $ unlines numberedPersons  
 
    putStrLn "Which person do you want to start talking to? \n"
    option <- getLine
    let chatfriend = (words (unwords (splitOn "," (numberedPersons !! read option))) !! 1)
                
    if ((checkDigits option == True) && (elem (option ++ ")") ( words ( unlines numberedPersons)) == True))
                    then do putStrLn ("Starting a chat with " ++ chatfriend ++ ". Good luck! ;)")
                            removeIfExists ("chatWith.temp") >> appendFile "chatWith.temp" (chatfriend)
                            do introChat                            
                    else do putStrLn "\nPlease try again with a number from the list!"
                            startChat

introChat = do              
            removeIfExists ("name.temp")
            removeIfExists ("stad.temp")
            appendFile "name.temp" ("")
            appendFile "stad.temp" ("")
            chatfriend <- readFile "chatWith.temp"
            putStrLn ("Hello, what's your name? \n")
            sname <- getLine
            let name = takeWhile (/=' ') (dropWhile (not.isUpper)(filter (/=',') sname))
            appendFile "name.temp" (name)            
            if ((not.leaveChat) name) 
                then putStrLn ("Hi there " ++ name ++ 
                    (if ('?' `elem` sname) 
                        then ", my name is " ++ chatfriend
                        else "!")) >> do chooseTopic
                else do avslut                 
             
 
chooseTopic = do
    putStrLn "\nVad är din passion i livet? \n"
    topic <- getLine
    identify topic
    
    avslut
            
avslut = do
            namnet <- readFile "name.temp"
            putStrLn ("\nJag ska kila nu " ++ namnet ++ ", kul att snacka med dig. \n")
            bye <- getLine
            identify bye
            
            slut

slut = do
            putStrLn ("\n Bye! :) \n")
            putStrLn "Chat terminated. Going back to main menu!"
            menu
            
            
-- lägg in alla nya funktioner här
                
bor = do 
            putStrLn "\nVar bor du? \n"
            plats <- getLine
            identify plats
            putStrLn ("\nSå där du bor i" ++ plats ++ "... har du en stor lägenhet?\nMenar inte att jag skulle flytta in och så, men bara teoretiskt om det hade gått?")
            svar <- getLine
            identify plats
            
            avslut
            
poetry = do
            namnet <- readFile "name.temp"
            putStrLn  (namnet ++ (perify (namnet)) ++ ", Piron, Paron. " ++ "\nJag har funderat lite på att vara med i poetryslam, finns det något sexigare?\n") >> do chooseTopic 
            svar <- getLine
            identify svar
            
            avslut
  
svett = do
            putStrLn ("\nHar du svettiga sockar? \n")
            svar <- getLine
            if ((not.leaveChat) svar) 
                then (if (positivt (svar)) 
                        then putStrLn ("\nByt strumpor! \n") >> identify svar >> do avslut
                        else putStrLn ("\nRena strumpor, inga strumpor, lika bra...\n")>> identify svar >> do avslut)
                else identify svar >> do avslut            
                
favorit = do
        putStrLn $ "\nVilken är din favorit tv-serie?"
        tvshow1 <- getLine
        identify tvshow1
        if "game of thornes" `isIn` (map toLower tvshow1) then ((putStrLn "winter is coming, så fet") >> do date) 
        else if "downton abbey" `isIn` (map toLower tvshow1) then ((putStrLn "Ja, man vill ju bara gå runt i deras kläder och bråka lite med lady Mary Crawley ;)") >> do date)
        else putStrLn $ "\nVilken är din favorit tv-serie nummer två?"
        tvshow2 <- getLine
        identify tvshow2
        if "game of thornes" `isIn` (map toLower tvshow2) then (putStrLn "winter is coming, så fet" >> do date) 
        else if "downton abbey" `isIn` (map toLower tvshow2) then (putStrLn "Ja, man vill ju bara gå runt i deras kläder och bråka lite med lady Mary Crawley ;)" >> do date)
        else putStrLn $ "\nNummer tre då?"
        tvshow3 <- getLine
        identify tvshow3
        if "game of thornes" `isIn` (map toLower tvshow1) then (putStrLn "winter is coming, så fet" >> do date) 
        else if "downton abbey" `isIn` (map toLower tvshow1) then (putStrLn "Ja, man vill ju bara gå runt i deras kläder och bråka lite med lady Mary Crawley ;)" >> do date)
        else putStrLn ("Så, dina favorit tv-serier är " ++ tvshow1 ++ ", " ++ tvshow2 ++ " och " ++ tvshow3 ++ "\nIntressant...") 
                
        avslut
     
date = do
            putStrLn ("\nDu, nu har vi ju ändå snackat ett tag..")
            putStrLn ("Så.. vill du gå på en date? :) \n")
            svar <- getLine
            if ((not.leaveChat) svar) 
                then 
                    (if positivt ((filter (/=',') (filter (/='!') svar) ++ " ")) 
                        then do putStrLn ("\nVad kul!")
                                chooseDate
                        else do putStrLn ("\nOkej, ha det gött då...\n") >> do avslut)
                else identify svar >> do slut    

                
chooseDate = do
    namnet <- readFile "name.temp"
    putStrLn $ "Vad vill du hitta på? \n"
    answer <- getLine
    if ((not.leaveChat) answer) 
        then  putStrLn ("\nDet låter kul " ++ namnet ++ " !") >> do svett 
        else identify answer >> do slut
            
-- movie = do  putStrLn ("What's your favorite movie?")
--            film <- getLine
--            putStrLn ("Oh thats a great one! Have you seen the latest Hunger Games movie?")
--            svar <- getLine
--            if svar == "yes" then putStrLn ("Me too, I really liked it, did you?") else  putStrLn ("You should, it was great!")
--            svar <- getLine
--            if svar == "yes" then putStrLn ("I thought so!") else putStrLn ("Hm...")

 {-   putStrLn ("Btw, where do you live?")
    place <- getLine
    putStrLn ("Oh really, I live in " ++ place ++ " too!")
    putStrLn ("Lets switch to swedish?")
    svar <- getLine
    if svar == "yes" || svar == "ja" || svar == "visst" then putStrLn ("Kanon, då gör vi det!") else putStrLn ("Varför? Jag snackar hellre på svenska..")
    putStrLn ("Vill du hitta på något i helgen " ++ name ++ "?")
    svar <- getLine
    if svar == "ja" || svar == "ja visst" || svar == "absolut" then putStrLn ("Vad kul Emoji smile Jag måste dra nu men vi snackar mer senare!") else putStrLn ("Okej en annan gång då kanske. Nu måste jag dra!")
    hejdå <- getLine
    putStrLn ("Ha det gött, hejdå!")
    -}

