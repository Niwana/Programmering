import Control.Monad (liftM, replicateM)
import Control.Monad.Random
import System.IO.Unsafe
import Data.List
import Data.Function (on)
import Control.DeepSeq
import Control.Exception
import System.Directory  

type Gene = String

-- Declare some values
target :: Gene
target = unsafePerformIO (readFile "targetString.temp")
               
population :: Int
population = read (unsafePerformIO (readFile "populationSize.temp"))

mutateRate :: IO Int
mutateRate = getStdRandom (randomR (0, (div 100 (length [1..(read (unsafePerformIO (readFile "mutationRate.temp")))]))))

maxGeneration :: Int
maxGeneration = 2000


randomString :: IO String
randomString = (liftM (take (length target) . randomRs (' ', 'z')) newStdGen)  


initialPopulation :: [String]
initialPopulation = unsafePerformIO (replicateM population randomString)   


-- kollar om rätt bokstav är på rätt plats
samePlace :: (Eq a1, Num a) => [a1] -> [a1] -> a
samePlace _ [] = 0
samePlace [] _ = 0
samePlace (x:xs) (y:ys)
    | x == y = (samePlace xs ys) + (3 - 1) 
    | otherwise = samePlace xs (ys)
                        
-- kollar om rätt bokstav finns med över huvud taget
notSamePlace [] _ = 0
notSamePlace _ [] = 0
notSamePlace (x:xs) (ys)
    | elem x (ys) = (notSamePlace xs ys) + 1
    | otherwise = (notSamePlace xs ys)

-- beräknar fitness-värdet. +2 för samma bokstav på samma plats. +1 för samma bokstav
fitnessValue :: Eq a => [a] -> [a] -> Int
fitnessValue _ [] = 0
fitnessValue [] _ = 0
fitnessValue (x:xs) (y:ys) = notSamePlace (x:xs) (y:ys) + if (x == y) 
                                                            then (samePlace (x:xs) (y:ys)) 
                                                            else samePlace xs ys
                                                        

                                
-- gör en tuple av varje genom med dess fitness-värde
fitness :: [String] -> [(String, Int)]
fitness [] = []
fitness (x:xs) = [(x, (fitnessValue x target))] ++ fitness xs       --man kan köra fitness initialPopulation

   
-- välj ut de två individer med högst fitness    
highestFitness :: [String] -> [(String, Int)]            
highestFitness f = drop (population-2) (sortBy (compare `on` snd) (fitness f))


-- tuple to strings
fTTS :: [String] -> String
fTTS x = (fst (head (highestFitness x)))

sTTS :: [String] -> String
sTTS x = (fst (last (highestFitness x)))


randomLetter :: IO Char
randomLetter =  (getStdRandom (randomR (' ', 'z')))

-- mutera båda föräldrarna
mutate :: [Char] -> [Char]
mutate [] = []
mutate (x:xs) = if (unsafePerformIO mutateRate == 0)
                    then (unsafePerformIO randomLetter) : mutate xs
                    else x : mutate xs


randomInt :: IO Int
randomInt = getStdRandom (randomR (0, 1))


-- para båda föräldrarna
mate :: String -> String -> String    
mate _ [] = []
mate [] _ = []
mate (x:xs) (y:ys) = if (unsafePerformIO randomInt < 1)
                        then (x : (mate (xs) (ys)))
                        else (y : (mate (xs) (ys)))  

        
---------------------------------------------------       


main = do
    if (unsafePerformIO $ doesFileExist "generations.txt")
        then removeFile "generations.txt"
        else return ()
    
    putStrLn "\n Please choose a target string: (ex. 'Hello world!')"
    target <- getLine
    writeFile "targetString.temp" target
    
    putStrLn "\n Choose the size of the population (ex. '50')"
    size <- getLine
    writeFile "populationSize.temp" size

    putStrLn "\n Choose the mutation rate in percent (ex. '2')"
    mutationRate <- getLine
    writeFile "mutationRate.temp" mutationRate
    
    putStrLn "\n Do you want live feedback?"
    putStrLn "1) Yes"
    putStrLn "2) No"
    option <- getLine
    writeFile "liveFeedback.temp" option
    
    start

-- Runs the algorithm    
start = send initialPopulation 0

send gen count = do
    appendFile "generations.txt" (show (gen) ++ "\n")
    let nextGeneration prev = [(mutate (mate (fTTS prev) (sTTS prev))) | x <- [1..population]]
    
        genCount c = c + 1
    
    if (unsafePerformIO (readFile "liveFeedback.temp") == "1")
        then putStrLn (show (gen))   
        else return ()
        
    recieve (nextGeneration gen) (genCount count) 
    
recieve gen count = do
    if (elem target gen)
        then do putStrLn (show gen)
                appendFile "generations.txt" (show gen)
                --putStrLn ("\n Final generation looked like: " ++ show gen)
                putStrLn ("\n The target: " ++ (show target) ++  " was found at position: " ++ show (((findIndices (==target) gen) !! 0) + 1))
                putStrLn  ("\n Number of generations: " ++ (show count))
                putStrLn "\n Check the file 'generations.txt' in your directory to get all of the generations. \n"
                removeFiles
        else send gen count
        

removeFiles = do
    removeFile "populationSize.temp"
    removeFile "mutationRate.temp"
    removeFile "targetString.temp"
    removeFile "liveFeedback.temp"
